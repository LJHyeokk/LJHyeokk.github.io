I"<h2 id="-2차-프로젝트-소개">📑 2차 프로젝트 소개</h2>

<p><br /></p>

<center><p style="font-weight:bold">유튜브 영상 😎</p></center>

<iframe width="560" height="315" src="https://www.youtube.com/embed/3guL-Zx5MwM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><br /></p>

<center><p style="font-weight:bold; color:blue">보러가기 ⬇️</p><a href="https://ljhyeokk.github.io/wecode-05/">1차 프로젝트 회고록</a></center>

<p><br />
<br /></p>

<div style="border: 3px solid #222441; padding-left:20px; border-radius:15px; width:70%; margin-left:15%; font-size:15px">
<br />
<center><div style="font-weight:bold; font-size:30px;">프로젝트 소개 🎥</div></center>
<br />
<span style="font-weight:bold">관찰 사이트 : </span> <span><a href="https://www.nike.com/kr/ko_kr/" target="_blank"> NIKE </a></span><br />
<br />
<span style="font-weight:bold">팀 명 : </span><span> Just Do It </span><br />
<br />
<span style="font-weight:bold">프로젝트 목표 : </span><span> Wecode에서 배운내용을 활용하여 관찰한 사이트의 기능개발 및 레이아웃 그리기</span><br />
<br />
<span style="font-weight:bold">진행기간 : </span><span> 2021년 1월 17일 ~ 2022년 1월 29일</span> <span style="font-weight:bold">( total : 12days )</span>

<br />
<br />

<span style="font-weight:bold">프로젝트 참여자 : </span><span> 이준혁, 김영욱, 이진웅, 황희윤</span>
<br /><br />

</div>
<p><br /></p>

<div style="display:flex; justify-content:space-between; border: 3px solid #222441; padding-top:30px; border-radius:15px;font-size:15px; width:70%; margin-left:15%;">
  <div style="margin-left:100px">
  <center><p style="font-weight:bold; font-size:25px">- 기술스택 -</p></center>
 <span style="font-weight:bold">FrontEnd 기술 스택  </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>⭕ [React]</span><span>⭕ [Router]</span><span>⭕ [Sass]</span><span>⭕ [Restful API]</span><span>⭕ [Git &amp; GitHub]</span>

  </div></span><br /><br /><br />
  <span style="font-weight:bold">BackEnd 기술 스택  </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>⭕ [Node.js]</span><span>⭕ [Express]</span><span>⭕ [MySQL]</span><span>⭕ [Bcrypt, JWT]</span><span>⭕ [Prisma]</span><span>⭕ [babel]</span><span>⭕ [node-cron]</span>
<span>⭕ [Jest]</span><span>⭕ [supertest]</span>
  </div></span><br />
  </div>

  <div style="margin-right:100px">
    <center><p style="font-weight:bold; font-size:25px">- Page &amp; API -</p></center>

<span style="font-weight:bold">이준혁 </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>[back]</span><span>- Draw API</span><span>- Detail API</span><span>- Cart API</span><span>- Search API</span><span>- MiddleWare</span>

  </div></span><br />
  <span style="font-weight:bold">김영욱  </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>[back]</span><span>- List API</span><span>- Filter API</span><span>- Review API</span><span>- KAKAO API</span><span>- Member API</span>

  </div></span><br />

<span style="font-weight:bold">이진웅 </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>[Front]</span><span>- 로그인 페이지</span><span>- 리스트 페이지</span><span>- 대문 페이지</span><span>- 카트 페이지</span>

  </div></span><br />

<span style="font-weight:bold">황희윤 </span><span><div style="display:flex; flex-direction: column; margin-left:20px ">
<span>[Front]</span><span>- 디테일 페이지</span><span>- snkrs 디테일 페이지</span>

  </div></span><br />

  </div>
</div>

<p><br /></p>

<h3 id="-회고">🧑 회고</h3>

<hr />

<p>1차 프로젝트는 e-commerce사이트를 클론하였기에 2차 프로젝트는 e-commerce사이트가 아닌 다른 플랫폼을 하고 싶었지만</p>

<p>아쉽게도 나이키를 모티브로하는 프로젝트를 맡게되었다.</p>

<p>그래도 나이키만의 감성이 있으니 상관은 없다.</p>

<p>회고는 기억에 남는것 몇가지만 쓰도록 하겠다.</p>

<p><br /></p>

<h5 id="-회고-1-db-데이터작업">🤮 <code class="language-plaintext highlighter-rouge">[회고-1]</code> DB 데이터작업</h5>

<p>우선 나이키의 특징은 많은 제품들, 그리고 그 제품들을 세분화시켜주는 필터기능, 추첨기능 이렇게 3가지이다.</p>

<p>나랑 영욱님은 DB 모델링이 끝나자마자 나이키의 특징을 살리기 위해 DB에 들어갈 제품들, 제품사진들을</p>

<p>수집하고 집어넣었는데.. 총 166개의 제품과 x4 만큼의 사진을 DB에 넣었다.</p>

<p>특히 각 제품별 사이즈의 수량을 집어넣는 과정이 괴랄했는데</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">style_code</span> <span class="o">=</span> <span class="o">[</span><span class="err">'</span><span class="no">ACA</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="no">ACB</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="no">ACC</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="no">ACD</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="no">ACE</span><span class="err">'</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">style_code</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">`</span><span class="o">(</span><span class="s">"${style_code[j]}-000${k}"</span><span class="o">,</span><span class="err">$</span><span class="o">{</span><span class="n">i</span><span class="o">},</span><span class="mi">80</span><span class="o">),</span><span class="err">`</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="c1">// 정확히 생각은 안나지만 대충 이러한 형식이었던 것 같다.</span>
</code></pre></div></div>

<p>도저히 수작업으론 할 수가 없다고 판단하여 알리고즘을 통해 DB에 넣었다.</p>

<p>몇몇 다른작업들도 수작업이 힘들다 싶을땐 알고리즘을 통해 간편하게 생성하여 DB에 넣었다.</p>

<p>전혀 생각치도 못한 부분에서 시간을 많이 잡아먹어서 조금 놀랬는데,</p>

<p>앞으로 DB 데이터작업이 많은 프로젝트라면 샘플로 몇개만 넣고</p>

<p>모든 API가 완성되어졌을때 데이터를 넣는것이 현명한 판단일 것 같다.</p>

<p><br /></p>

<h5 id="-회고-2-소통">😁 <code class="language-plaintext highlighter-rouge">[회고-2]</code> 소통</h5>

<p>데이터작업, prisma로 스키마 만들기 등 다양한 것들을</p>

<p>vsCode의 Rive Share와 Zoom, Slack을 이용하여 영욱님과 함께하니 크로스체킹을 통해 놓치는 것이 없었다.</p>

<p>(물론 둘다 몰랐던것을 제외하곤)</p>

<p>이러한 과정때문이었을까? 영욱님과 케미가 잘맞았고 소통에 대한 불편함?은 느끼지 못했다.</p>

<p>또한 영욱님이 책임감도 갖고 프로젝트에 임하는걸 알게되어 믿고 맡길 수 있었고</p>

<p>솔직히 프로젝트 기간내내 백엔드 작업은 재밌었다.</p>

<p>하지만 front와의 소통이 문제였다.</p>

<p>두명이서 UI작업을 모두 하려고 하다보니 너무 바쁜것 같았고</p>

<p>그 때문에 생각보다 우리와의 교류가 없었다.</p>

<p>‘API를 ~~~한 형태로 보내줬으면 좋겠다.’ 라는 것 또한 없었기에</p>

<p>1차 프로젝트때 front를 했던 경험을 살려 front가 사용하기 편한 형태로 API를 만들었다.</p>

<p>그리고 front분들이 ‘어떻게 요청을 날려야하는지를’ 알기위해 back의 code를 보며</p>

<p>시간을 허비하는것을 막기위해 각 API마다 명세서를 파일로 만들어서 Slack방에다가 공유하였다.</p>

<center><img src="../images/2021-10-27-first/nike-8.png" alt="nike-8" /></center>
<p><br /></p>

<div class="container" style="  width: 850px;margin: 0 auto; position:relative">
    <div class="album" style="  height: 850px; width: 850px; overflow: hidden; border: 1px solid #222441;">
      <div class="images" style="  position: relative;display: flex; height: 850px; transition: 0.5s;">
        <img src="../images/2021-10-27-first/nike-5.png" alt="nike-5" style="width: 850px; object-fit: contain;" />
        <img src="../images/2021-10-27-first/nike-6.png" alt="nike-6" style="width: 850px; object-fit: contain;" />
        <img src="../images/2021-10-27-first/nike-7.png" alt="nike-7" style="width: 850px; object-fit: contain;" />
      </div>
    </div>
  <button class="prev" style="position: absolute; top:50%; left:-7%; width:40px; height:40px">&lt;</button>
  <button class="next" style="position: absolute; top:50%; right:-7%; width:40px; height:40px;">&gt;</button>
  </div>

<script>
let curPos = 0;
let postion = 0;
const IMAGE_WIDTH = 100;
const prevBtn = document.querySelector(".prev")
const nextBtn = document.querySelector(".next")
const images = document.querySelector(".images")
 
function prev(){
  if(curPos > 0){
    nextBtn.removeAttribute("disabled")
    postion += IMAGE_WIDTH;
    images.style.transform = `translateX(${postion}%)`;
    curPos = curPos - 1;
  }
  if(curPos == 0){
    prevBtn.setAttribute('disabled', 'true')
  }
}
function next(){
  if(curPos < 2){
    prevBtn.removeAttribute("disabled")
    postion -= IMAGE_WIDTH;
    images.style.transform = `translateX(${postion}%)`;
    curPos = curPos + 1;
  }
  if(curPos == 2){
    nextBtn.setAttribute('disabled', 'true')
  }
}
 
function init(){
  prevBtn.setAttribute('disabled', 'true')
  prevBtn.addEventListener("click", prev)
  nextBtn.addEventListener("click", next)
}
 
init();
 </script>

<center>(추첨 API.md의 내용)</center>

<p><br /></p>

<p>위와같이 API 명세서를 만들어 front에게 전달하니</p>

<p>나의 의도를 상세히 말할 수 있었고 상대방 또한 빠르게 이해했다.</p>

<p>프론트입장에서 API형태를 요청을 날리지 않아도 알 수 있었고</p>

<p>back을 신경쓰지않고 작업에 몰두할 수 있게되어 좋았다고 한다.</p>

<p><br /></p>

<h5 id="-회고-3-sql을-좀-더-공부해보자">🤔 <code class="language-plaintext highlighter-rouge">[회고-3]</code> SQL을 좀 더 공부해보자</h5>

<p>이번 프로젝트를 하면서 SQL로 할 수 있는것이 생각보다 많다는 것을 알게되었다.</p>

<p>지금까지 Dao단에서는 기초적인것들로 구현하고 모든 가공을 Service단에서 처리하였는데</p>

<p>그러다보니 쓸데없는 DB의 접속이 늘었고 코드 또한 가독성이 좋지 않았다.</p>

<p>이러한 부분을 코드리뷰로 지적받아 구글링을 하다보니 ‘쿼리문으로 이런것도 할 수 있어?’ 라는 생각과 함께 나의 무지함을 알게되었다.</p>

<p>초급수준인 나에겐 그 깊이는 아득했기에 한동안 정보의 늪에 빠져 약간의 좌절감에 빠져있었다.</p>

<p>하지만 이제 시작하는 단계임을 인정하자 마음이 조금 편해졌고 매일 새롭게 알게되는 쿼리문을 정리하기로 마음먹었다.</p>

<p><br /></p>

<h2 id="-backend-just-do-it">🧑‍💻 Backend (Just Do It)</h2>

<center class="notice--danger">아쉽게도 2차 프로젝트 또한 e-commerce사이트를 코딩하게 되어 새로운 기능을 많이 추가하지는 못하였다.</center>

<center class="notice--info">하지만 1차 프로젝트에서는 하지 못했던 "예외처리 및 HTTP STATUS CODE, Unit Test" 등을 적극 활용하여 완성도 높은 API를 만들기 위해 노력하였다.</center>

<p><br /></p>

<center><p style="font-weight:bold">- 사전 DB 모델링 -</p></center>
<center><img src="../images/2021-10-27-first/nike-1.png" alt="nike-1" /></center>
<p><br /></p>

<p>기본적으로 e-commerce사이트 특징인 products가 중심이 되어 대부분의 table이 연결되었고</p>

<p>나이키는 필터기능이 상당히 많기에 그에 맞게 table이 나눠져 있는것을 볼 수 있다.</p>

<p>나이키는 한가지 특징이 있는데 그것은 바로 추첨(Draw)기능이다.</p>

<p>추첨을 하기 위한 상품은 장바구니에도 들어가지 않으며 댓글또한 달 수 없기에</p>

<p>products가 아닌 snkrs table에 따로 담아 특별취급하였다.</p>

<p>또한 추첨기능을 구현하기위해 추첨을 한 사람들을 관리하는 table인 snkrs_data</p>

<p>당첨된 사람들을 관리하는 table인 snkrs_winners를 만들었다.</p>

<p><br /></p>

<p><br /></p>

<h3 id="detail-api">Detail API</h3>

<hr />

<blockquote>
  <p>models/productDao.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">getProductData</span> <span class="o">=</span> <span class="n">async</span> <span class="n">style_code</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">await</span> <span class="n">prisma</span><span class="o">.</span><span class="n">$queryRaw</span><span class="err">`</span>
    <span class="no">SELECT</span>
      <span class="n">products</span><span class="o">.</span><span class="na">style_code</span><span class="o">,</span>
      <span class="n">products</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
      <span class="n">categories</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">category</span><span class="o">,</span>
      <span class="n">product_colors</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">color</span><span class="o">,</span>
      <span class="n">product_colors</span><span class="o">.</span><span class="na">color_hex</span> <span class="n">as</span> <span class="n">hex</span><span class="o">,</span>
      <span class="n">product_genders</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">gender</span><span class="o">,</span>
      <span class="n">normal_price</span><span class="o">,</span>
      <span class="n">sale_rate</span><span class="o">,</span>
      <span class="n">sale_price</span><span class="o">,</span>
      <span class="n">is_member</span><span class="o">,</span>
      <span class="n">sub_icon</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">shoes_type</span><span class="o">,</span>
      <span class="n">sub_brand</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">brand</span><span class="o">,</span>
      <span class="n">sub_clothes</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">clothes_type</span><span class="o">,</span>
      <span class="n">sub_accessories</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">acc_type</span><span class="o">,</span>
      <span class="o">(</span>
        <span class="no">SELECT</span> <span class="nf">JSON_ARRAYAGG</span><span class="o">(</span><span class="no">JSON_OBJECT</span><span class="o">(</span><span class="err">'</span><span class="n">url</span><span class="err">'</span><span class="o">,</span> <span class="n">product_img_urls</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="err">'</span><span class="n">is_main</span><span class="err">'</span><span class="o">,</span> <span class="n">is_main</span><span class="o">))</span>
        <span class="no">FROM</span> <span class="n">product_img_urls</span>
        <span class="no">JOIN</span> <span class="n">products</span> <span class="no">ON</span> <span class="n">products</span><span class="o">.</span><span class="na">style_code</span> <span class="o">=</span> <span class="n">product_img_urls</span><span class="o">.</span><span class="na">style_code</span>
        <span class="no">WHERE</span> <span class="n">product_img_urls</span><span class="o">.</span><span class="na">style_code</span> <span class="o">=</span> <span class="err">$</span><span class="o">{</span><span class="n">style_code</span><span class="o">}</span>
      <span class="o">)</span> <span class="no">AS</span> <span class="n">img</span><span class="o">,</span>
      <span class="o">(</span>
        <span class="no">SELECT</span> <span class="nf">JSON_ARRAYAGG</span><span class="o">(</span><span class="no">JSON_OBJECT</span><span class="o">(</span><span class="err">'</span><span class="n">size</span><span class="err">'</span><span class="o">,</span> <span class="n">product_sizes</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="err">'</span><span class="n">quantity</span><span class="err">'</span><span class="o">,</span> <span class="n">product_with_sizes</span><span class="o">.</span><span class="na">quantity</span><span class="o">))</span>
        <span class="no">FROM</span> <span class="n">product_with_sizes</span>
        <span class="no">JOIN</span> <span class="n">products</span> <span class="no">ON</span> <span class="n">products</span><span class="o">.</span><span class="na">style_code</span> <span class="o">=</span> <span class="n">product_with_sizes</span><span class="o">.</span><span class="na">style_code</span>
        <span class="no">JOIN</span> <span class="n">product_sizes</span> <span class="no">ON</span> <span class="n">product_size_id</span> <span class="o">=</span> <span class="n">product_sizes</span><span class="o">.</span><span class="na">id</span>
        <span class="no">WHERE</span> <span class="n">product_with_sizes</span><span class="o">.</span><span class="na">style_code</span> <span class="o">=</span> <span class="err">$</span><span class="o">{</span><span class="n">style_code</span><span class="o">}</span>
      <span class="o">)</span> <span class="no">AS</span> <span class="n">info</span>
    <span class="no">FROM</span>
      <span class="n">products</span>
    <span class="no">JOIN</span>
      <span class="n">categories</span> <span class="no">ON</span> <span class="n">category_id</span> <span class="o">=</span> <span class="n">categories</span><span class="o">.</span><span class="na">id</span>
    <span class="no">LEFT</span> <span class="no">JOIN</span>
      <span class="n">product_colors</span> <span class="no">ON</span> <span class="n">color_id</span> <span class="o">=</span> <span class="n">product_colors</span><span class="o">.</span><span class="na">id</span>
    <span class="no">JOIN</span>
      <span class="n">product_genders</span> <span class="no">ON</span> <span class="n">gender_id</span> <span class="o">=</span> <span class="n">product_genders</span><span class="o">.</span><span class="na">id</span>
    <span class="no">LEFT</span> <span class="no">JOIN</span>
      <span class="n">sub_icon</span> <span class="no">ON</span> <span class="n">sub_icon_id</span> <span class="o">=</span> <span class="n">sub_icon</span><span class="o">.</span><span class="na">id</span>
    <span class="no">LEFT</span> <span class="no">JOIN</span>
      <span class="n">sub_brand</span> <span class="no">ON</span> <span class="n">sub_brand_id</span> <span class="o">=</span> <span class="n">sub_brand</span><span class="o">.</span><span class="na">id</span>
    <span class="no">LEFT</span> <span class="no">JOIN</span>
      <span class="n">sub_clothes</span> <span class="no">ON</span> <span class="n">sub_clothes_id</span> <span class="o">=</span> <span class="n">sub_clothes</span><span class="o">.</span><span class="na">id</span>
    <span class="no">LEFT</span> <span class="no">JOIN</span>
      <span class="n">sub_accessories</span> <span class="no">ON</span> <span class="n">sub_accessories_id</span> <span class="o">=</span> <span class="n">sub_accessories</span><span class="o">.</span><span class="na">id</span>
    <span class="no">WHERE</span>
      <span class="n">products</span><span class="o">.</span><span class="na">style_code</span> <span class="o">=</span> <span class="err">$</span><span class="o">{</span><span class="n">style_code</span><span class="o">};</span>
  <span class="err">`</span><span class="o">;</span>
<span class="o">};</span>
</code></pre></div></div>

<p>상품의 디테일 정보를 가져오는 쿼리문이다.</p>

<p>하나의 제품에 4개씩 있는 이미지와 10개씩 있는 사이즈를 ‘어떻게 객체화 시켜서 가져올까?’에 대해 많이 고민했었다.</p>

<p>처음에는 GROUP_CONCAT과 CONCAT으로 [,]으로 배열의 모양을 만들고 그것을 {,}로 객체를 만들려고 하였다.</p>

<p>어찌저찌 만들긴 하였으나 재활용하기에는 너무나 코드가 가독성이 떨어지고 복잡해보였다.</p>

<p>그러던중 JSON을 사용하여 손쉽게 배열과 객체를 만들 수 있다는 것을 구글링을 통해 알아냈다.!</p>

<p>JSON_OBJECT으로 각 데이터를 객체화 시키고 JSON_ARRAYAGG을 통해 배열로 만들어준다.</p>

<p>생각보다 사용법도 간단하고 결과물도 좋아서 자주 사용할 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s">"message"</span><span class="o">:</span> <span class="s">"성공"</span><span class="o">,</span>
    <span class="s">"data"</span><span class="o">:</span> <span class="o">{</span>
        <span class="s">"style_code"</span><span class="o">:</span> <span class="s">"AAA-0001"</span><span class="o">,</span>
        <span class="s">"name"</span><span class="o">:</span> <span class="s">"나이키 에어포스 1 GORE-TEX"</span><span class="o">,</span>
        <span class="s">"category"</span><span class="o">:</span> <span class="s">"shoes"</span><span class="o">,</span>
        <span class="s">"color"</span><span class="o">:</span> <span class="s">"주황색"</span><span class="o">,</span>
        <span class="s">"hex"</span><span class="o">:</span> <span class="s">"#EB621D"</span><span class="o">,</span>
        <span class="s">"gender"</span><span class="o">:</span> <span class="s">"남성"</span><span class="o">,</span>
        <span class="s">"normal_price"</span><span class="o">:</span> <span class="mi">189000</span><span class="o">,</span>
        <span class="s">"sale_rate"</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="s">"sale_price"</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="s">"is_member"</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
        <span class="s">"shoes_type"</span><span class="o">:</span> <span class="s">"에어 포스 1"</span><span class="o">,</span>
        <span class="s">"brand"</span><span class="o">:</span> <span class="s">"나이키 스포츠웨어"</span><span class="o">,</span>
        <span class="s">"clothes_type"</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="s">"acc_type"</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="s">"img"</span><span class="o">:</span> <span class="o">[</span>
            <span class="o">{</span>
                <span class="s">"url"</span><span class="o">:</span> <span class="s">"/Images/Men/Shoes/Airforce/1/1-1.png"</span><span class="o">,</span>
                <span class="s">"is_main"</span><span class="o">:</span> <span class="mi">1</span>
            <span class="o">},</span>
            <span class="o">{</span>
                <span class="s">"url"</span><span class="o">:</span> <span class="s">"/Images/Men/Shoes/Airforce/1/1-2.png"</span><span class="o">,</span>
                <span class="s">"is_main"</span><span class="o">:</span> <span class="mi">0</span>
            <span class="o">},</span>
            <span class="o">{</span>
                <span class="s">"url"</span><span class="o">:</span> <span class="s">"/Images/Men/Shoes/Airforce/1/1-3.png"</span><span class="o">,</span>
                <span class="s">"is_main"</span><span class="o">:</span> <span class="mi">0</span>
            <span class="o">},</span>
            <span class="o">{</span>
                <span class="s">"url"</span><span class="o">:</span> <span class="s">"/Images/Men/Shoes/Airforce/1/1-4.png"</span><span class="o">,</span>
                <span class="s">"is_main"</span><span class="o">:</span> <span class="mi">0</span>
            <span class="o">}</span>
        <span class="o">],</span>
        <span class="s">"info"</span><span class="o">:</span> <span class="o">[</span>
            <span class="o">{</span>
                <span class="s">"size"</span><span class="o">:</span> <span class="s">"220"</span><span class="o">,</span>
                <span class="s">"quantity"</span><span class="o">:</span> <span class="mi">80</span>
            <span class="o">},</span>
            <span class="o">{</span>
                <span class="s">"size"</span><span class="o">:</span> <span class="s">"230"</span><span class="o">,</span>
                <span class="s">"quantity"</span><span class="o">:</span> <span class="mi">80</span>
            <span class="o">},</span>
            <span class="o">{</span>
                <span class="s">"size"</span><span class="o">:</span> <span class="s">"240"</span><span class="o">,</span>
                <span class="s">"quantity"</span><span class="o">:</span> <span class="mi">80</span>
            <span class="o">},</span>

          <span class="o">...</span>

        <span class="o">]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="cart-api">Cart API</h3>

<hr />

<p>모두다 설명할 수 없으니 Cart API의 한 부분인 Create 부분만 보도록 한다.</p>

<blockquote>
  <p>middleWare/authorization.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">authentication</span> <span class="o">=</span> <span class="n">async</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="kd">const</span> <span class="n">token</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">body</span><span class="o">.</span><span class="na">user_id</span><span class="o">;</span>
    <span class="kd">const</span> <span class="n">validToken</span> <span class="o">=</span> <span class="n">verifyToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">validToken</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">const</span> <span class="o">[</span><span class="n">check</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">userDao</span><span class="o">.</span><span class="na">isExistUser</span><span class="o">(</span><span class="n">validToken</span><span class="o">.</span><span class="na">id</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">id</span><span class="o">);</span>
      <span class="kd">const</span> <span class="n">isExsitUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">check</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">404</span><span class="o">);</span>
      <span class="n">isExsitUser</span><span class="o">.</span><span class="na">notExistErr</span><span class="o">(</span><span class="err">'</span><span class="n">존재하지</span> <span class="n">않는</span> <span class="nc">UserId</span> <span class="n">입니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
      <span class="n">req</span><span class="o">.</span><span class="na">body</span><span class="o">.</span><span class="na">user_id</span> <span class="o">=</span> <span class="n">validToken</span><span class="o">.</span><span class="na">id</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">id</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="kd">const</span> <span class="n">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Error</span><span class="o">(</span><span class="err">'</span><span class="n">토큰이</span> <span class="n">유효하지</span> <span class="n">않습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
      <span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="mi">401</span><span class="o">;</span>
      <span class="k">throw</span> <span class="n">err</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">next</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">err</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">res</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">||</span> <span class="mi">500</span><span class="o">).</span><span class="na">send</span><span class="o">({</span> <span class="nl">message:</span> <span class="err">'</span><span class="n">실패</span><span class="err">'</span><span class="o">,</span> <span class="nl">err:</span> <span class="n">err</span><span class="o">.</span><span class="na">message</span> <span class="o">});</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>클라이언트가 user_id를 갖는 토큰을 담아 요청을 보내면</p>

<p>토큰을 확인하여 유효한지 확인하고, 유효하지 않다면 인증에러인 401을 띄운다.</p>

<p>또한 토큰은 유효하지만 DB에 없는 user라면 자원이 존재하지않는다는 뜻이므로 404에러를 띄운다.</p>

<blockquote>
  <p>utils/err.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RequiredKeys</span> <span class="o">{</span>
  <span class="n">constructor</span><span class="o">(</span><span class="no">REQUIRED_KEYS</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span> <span class="o">=</span> <span class="no">REQUIRED_KEYS</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="n">verify</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">key</span> <span class="n">in</span> <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">const</span> <span class="n">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Error</span><span class="o">(</span><span class="err">`$</span><span class="o">{</span><span class="n">key</span><span class="o">}</span> <span class="n">정보가</span> <span class="n">올바르지</span> <span class="n">않습니다</span><span class="o">.</span><span class="err">`</span><span class="o">);</span>
        <span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="mi">400</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">err</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AffectedRow</span> <span class="o">{...}</span> <span class="c1">// 생략</span>

<span class="kd">class</span> <span class="nc">IsExistItem</span> <span class="o">{...}</span> <span class="c1">// 생략</span>

<span class="n">export</span> <span class="o">{</span> <span class="nc">RequiredKeys</span><span class="o">,</span> <span class="nc">AffectedRow</span><span class="o">,</span> <span class="nc">IsExistItem</span> <span class="o">};</span>
</code></pre></div></div>

<p>자주 사용되는 에러함수들을 캡슐화 하여 관리하였다.</p>

<p>하나로 합칠까 생각하였지만 일단은 각각 나눠놓았다.</p>

<p>(너무 길어지므로 나머지는 생략)</p>

<blockquote>
  <p>controllers/cartControllers.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">createCart</span> <span class="o">=</span> <span class="n">async</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="kd">const</span> <span class="o">{</span> <span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">quantity</span> <span class="o">}</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">body</span><span class="o">;</span>
    <span class="kd">const</span> <span class="no">REQUIRED_KEYS</span> <span class="o">=</span> <span class="o">{</span> <span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">quantity</span> <span class="o">};</span>

    <span class="kd">const</span> <span class="n">keys</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RequiredKeys</span><span class="o">(</span><span class="no">REQUIRED_KEYS</span><span class="o">);</span>
    <span class="n">keys</span><span class="o">.</span><span class="na">verify</span><span class="o">();</span>

    <span class="kd">const</span> <span class="n">result</span> <span class="o">=</span> <span class="n">await</span> <span class="n">cartServices</span><span class="o">.</span><span class="na">createCart</span><span class="o">(</span>
      <span class="n">style_code</span><span class="o">,</span>
      <span class="n">user_id</span><span class="o">,</span>
      <span class="n">size</span><span class="o">,</span>
      <span class="n">quantity</span>
    <span class="o">);</span>

    <span class="n">res</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="mi">201</span><span class="o">).</span><span class="na">send</span><span class="o">({</span> <span class="nl">message:</span> <span class="err">'</span><span class="n">성공</span><span class="err">'</span><span class="o">,</span> <span class="n">result</span> <span class="o">});</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">err</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">res</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">||</span> <span class="mi">500</span><span class="o">).</span><span class="na">send</span><span class="o">({</span> <span class="nl">message:</span> <span class="err">'</span><span class="n">실패</span><span class="err">'</span><span class="o">,</span> <span class="nl">err:</span> <span class="n">err</span><span class="o">.</span><span class="na">message</span> <span class="o">});</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>컨트롤러단에서는 클라이언트가 요청에 필요한 값들을 제대로 넣었는지 유효성 검사를 하고</p>

<p>아니라면 400에러를 띄우도록 했다.</p>

<p>성공시에는 201코드로 반환해주었다.</p>

<blockquote>
  <p>services/cartServices.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span> <span class="nn">cartDao</span><span class="o">,</span> <span class="n">productDao</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="o">../</span><span class="n">models</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">resultType</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="o">../</span><span class="n">type</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">IsExistItem</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="o">../</span><span class="n">utils</span><span class="o">/</span><span class="n">err</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="n">createCart</span> <span class="o">=</span> <span class="n">async</span> <span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">check</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">cartDao</span><span class="o">.</span><span class="na">checkCart</span><span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">checkSize</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">productDao</span><span class="o">.</span><span class="na">isExistSizes</span><span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">checkStyleCode</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">productDao</span><span class="o">.</span><span class="na">isExistStyleCode</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>

  <span class="kd">const</span> <span class="n">isExistStyleCode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">checkStyleCode</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">404</span><span class="o">);</span>
  <span class="n">isExistStyleCode</span><span class="o">.</span><span class="na">notExistErr</span><span class="o">(</span><span class="err">'</span><span class="n">유효하지</span> <span class="n">않는</span> <span class="n">styleCode</span> <span class="n">입니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>

  <span class="kd">const</span> <span class="n">isExistSize</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">checkSize</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">404</span><span class="o">);</span>
  <span class="n">isExistSize</span><span class="o">.</span><span class="na">notExistErr</span><span class="o">(</span><span class="err">'</span><span class="n">유효하지</span> <span class="n">않는</span> <span class="n">size</span> <span class="n">입니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>

  <span class="kd">const</span> <span class="n">isExistItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">check</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">409</span><span class="o">);</span>
  <span class="n">isExistItem</span><span class="o">.</span><span class="na">existErr</span><span class="o">(</span><span class="err">'</span><span class="n">이미</span> <span class="n">품목에</span> <span class="n">있습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>

  <span class="n">await</span> <span class="n">cartDao</span><span class="o">.</span><span class="na">createCart</span><span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">quantity</span><span class="o">);</span>

  <span class="kd">const</span> <span class="n">data</span> <span class="o">=</span> <span class="n">await</span> <span class="n">cartDao</span><span class="o">.</span><span class="na">getCartList</span><span class="o">(</span><span class="n">user_id</span><span class="o">);</span>

  <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
<span class="o">};</span>
</code></pre></div></div>

<p>이미 Create된 제품이라면 409에러를 띄우도록 하였다.</p>

<p>서비스단에서는 한번더 요청에 대한 값을 유효성 검사하여 404에러를 띄우도록 했다.</p>

<p>사실 404에러들을 한곳에 모아 middleWare로 만드는게 더 좋을것 같았지만</p>

<p>팀원들과 사전합의가 되지않은 상황에서 독단적으로 할 수가없어 이대로 두었다.</p>

<p>그리고 카트에 Create가 성공했을시</p>

<p>프론트에서 카트리스트를 보여주는 API를 또 요청하는것이 귀찮을수도(또는 어려움이) 있을것 같아</p>

<p>getCartList를 return 해주었다.</p>

<blockquote>
  <p>models/cartDao.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span> <span class="nn">PrismaClient</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="nd">@prisma</span><span class="o">/</span><span class="n">client</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">createType</span><span class="o">,</span> <span class="n">updateType</span><span class="o">,</span> <span class="n">deleteType</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="o">../</span><span class="n">type</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">AffectedRow</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="o">../</span><span class="n">utils</span><span class="o">/</span><span class="n">err</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="n">prisma</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrismaClient</span><span class="o">();</span>

<span class="kd">const</span> <span class="n">createCart</span> <span class="o">=</span> <span class="n">async</span> <span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">user_id</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">quantity</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="n">await</span> <span class="n">prisma</span><span class="o">.</span><span class="n">$queryRaw</span><span class="err">`</span>
    <span class="no">INSERT</span> <span class="no">INTO</span>
      <span class="nf">carts</span><span class="o">(</span>
        <span class="n">style_code</span><span class="o">,</span>
        <span class="n">user_id</span><span class="o">,</span>
        <span class="n">size</span><span class="o">,</span>
        <span class="n">quantity</span>
      <span class="o">)</span>
    <span class="no">VALUES</span>
      <span class="o">(</span>
        <span class="err">$</span><span class="o">{</span><span class="n">style_code</span><span class="o">},</span>
        <span class="err">$</span><span class="o">{</span><span class="n">user_id</span><span class="o">},</span>
        <span class="err">$</span><span class="o">{</span><span class="n">size</span><span class="o">},</span>
        <span class="err">$</span><span class="o">{</span><span class="n">quantity</span><span class="o">}</span>
      <span class="o">);</span>
  <span class="err">`</span><span class="o">;</span>

  <span class="kd">const</span> <span class="o">[</span><span class="n">row</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">prisma</span><span class="o">.</span><span class="n">$queryRaw</span><span class="err">`</span>
    <span class="no">SELECT</span> <span class="nf">ROW_COUNT</span><span class="o">()</span> <span class="n">as</span> <span class="n">result</span><span class="o">;</span>
  <span class="err">`</span><span class="o">;</span>

  <span class="kd">const</span> <span class="n">newRow</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AffectedRow</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">createType</span><span class="o">,</span> <span class="mi">409</span><span class="o">);</span>
  <span class="n">newRow</span><span class="o">.</span><span class="na">result</span><span class="o">();</span>

  <span class="k">return</span><span class="o">;</span>
<span class="o">};</span>
</code></pre></div></div>

<p>사실 이부분을 넣을지 말지 고민했다.</p>

<p>하지만 보다 완성도 높은 API를 만들기 위해</p>

<p>Create된 후 Affected Row가 1이란 값을 제대로 뱉어내는지 확인을 했다.</p>

<p>만약 제대로 row가 생성되지 않았다면 409에러를 띄우도록 했다.</p>

<p><br /></p>

<p>아직 이부분은 50%밖에 완성이 되지않았다.</p>

<p>어떤 이유에서든지 만약 row가 2개 생겼을 시 에러를 띄우겠지만</p>

<p>이미 그 값은 table에 들어갔을 것이다.</p>

<p>그러므로 추후 TRANSACTION을 통해 에러가 발생되면 ROLLBACK 시키는 로직을 추가할 것이다.</p>

<p><br /></p>

<h3 id="draw-api">Draw API</h3>

<hr />

<p>나이키의 꽃 추첨기능이다.</p>

<p><br /></p>
<center><img src="../images/2021-10-27-first/nike-4.png" alt="nike-4" style="zoom:70%;" /></center>
<p><br /></p>

<blockquote>
  <p>server.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">lottoSchedule</span> <span class="o">=</span> <span class="n">async</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="n">list</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">getSnkrsList</span><span class="o">();</span>
  <span class="n">let</span> <span class="n">isOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

  <span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">cron</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="err">`</span><span class="mo">00</span> <span class="mi">09</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="err">`</span><span class="o">,</span> <span class="n">async</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="n">isOpen</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
      <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">updataOpenClose</span><span class="o">(</span><span class="n">isOpen</span><span class="o">,</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">style_code</span><span class="o">);</span>
      <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">'</span><span class="n">시작</span><span class="err">'</span><span class="o">);</span>
    <span class="o">});</span>

    <span class="n">cron</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="err">`$</span><span class="o">{(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">5</span><span class="o">}</span> <span class="mi">30</span> <span class="mi">09</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="err">`</span><span class="o">,</span> <span class="n">async</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="n">isOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
      <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">updataOpenClose</span><span class="o">(</span><span class="n">isOpen</span><span class="o">,</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">style_code</span><span class="o">);</span>
      <span class="n">await</span> <span class="n">snkrsServices</span><span class="o">.</span><span class="na">selectWinner</span><span class="o">(</span><span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">style_code</span><span class="o">);</span>
      <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">'</span><span class="n">마감</span><span class="err">'</span><span class="o">);</span>
    <span class="o">});</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p><br /></p>
<div style="display:flex; justify-content:space-between; height:600px">
<span><center><img src="../images/2021-10-27-first/nike-2.png" alt="nike-2" /></center></span>
<span><center><img src="../images/2021-10-27-first/nike-3.png" alt="nike-3" /></center></span>
</div>

<p>snkrs 제품들은 매일 09:00 ~ 09:30에 추첨을 할 수 있다.</p>

<p>처음에는 mysql table의 칼럼의 값을 어떻게 시간으로 제어 할 수 있을지 막막하였다.</p>

<p>하지만 다행히도 구글링해보니 소스는 많았다.</p>

<p>Event Scheduler, Cron 등 다양한것이 있었지만</p>

<p>node에서 지원해주는 node-cron이란것이 있다는 것을 알게되어 이것을 활용하기로 했다.</p>

<p>위의 함수는 정해진 시간에 snkrs 제품들의 추첨여부가 변경되고 당첨자를 뽑게하는 기능이다.</p>

<blockquote>
  <p>services/snkrsServices.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">createUsersToLottoBox</span> <span class="o">=</span> <span class="n">async</span> <span class="o">(</span><span class="n">user_id</span><span class="o">,</span> <span class="n">style_code</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">snkrs</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">getSnkrsData</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">checkStyleCode</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">isExistStyleCode</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">checkSize</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">isExistSizes</span><span class="o">(</span><span class="n">style_code</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>

  <span class="kd">const</span> <span class="n">isExistStyleCode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">checkStyleCode</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">404</span><span class="o">);</span>
  <span class="n">isExistStyleCode</span><span class="o">.</span><span class="na">notExistErr</span><span class="o">(</span><span class="err">'</span><span class="n">유효하지</span> <span class="n">않는</span> <span class="n">styleCode</span> <span class="n">입니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
  <span class="kd">const</span> <span class="n">isExistSize</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">checkSize</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">404</span><span class="o">);</span>
  <span class="n">isExistSize</span><span class="o">.</span><span class="na">notExistErr</span><span class="o">(</span><span class="err">'</span><span class="n">유효하지</span> <span class="n">않는</span> <span class="n">size</span> <span class="n">입니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>

  <span class="k">if</span> <span class="o">(</span><span class="n">snkrs</span><span class="o">.</span><span class="na">is_open</span> <span class="o">===</span> <span class="n">statusType</span><span class="o">.</span><span class="na">OPEN</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">const</span> <span class="o">[</span><span class="n">check</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">checkUserLottoBox</span><span class="o">(</span><span class="n">user_id</span><span class="o">,</span> <span class="n">style_code</span><span class="o">);</span>

    <span class="kd">const</span> <span class="n">isExistItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">check</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">409</span><span class="o">);</span>
    <span class="n">isExistItem</span><span class="o">.</span><span class="na">existErr</span><span class="o">(</span><span class="err">'</span><span class="n">이미</span> <span class="n">추첨을</span> <span class="n">하셨습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>

    <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">addLottoBox</span><span class="o">(</span><span class="n">user_id</span><span class="o">,</span> <span class="n">style_code</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
    <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">addWinnerBox</span><span class="o">(</span><span class="n">user_id</span><span class="o">,</span> <span class="n">style_code</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>

    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">snkrs</span><span class="o">.</span><span class="na">is_open</span> <span class="o">===</span> <span class="n">statusType</span><span class="o">.</span><span class="na">CLOSE</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">const</span> <span class="n">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Error</span><span class="o">(</span><span class="err">'</span><span class="n">추첨기간이</span> <span class="n">아닙니다</span><span class="err">'</span><span class="o">);</span>
    <span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="mi">409</span><span class="o">;</span>
    <span class="k">throw</span> <span class="n">err</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>바로 서비스단에서 설명을 하겠다.</p>

<p>우선 프론트에서 ‘응모하기’버튼은 제품의 is_open이라는 값에 의해 active가 결정된다.</p>

<p>그리고 백에서도 is_open값에 따라 추첨가능여부를 판단한다.</p>

<p>추첨시간이 되어 사용자가 ‘응모하기’버튼을 눌러 요청을 보내면 요청에 대한 유효성 검사를 한다.</p>

<p>검사에 이상이 없다면 ,</p>

<p>addLottoBox, addWinnerBox함수를 통해 DB의 snkrs_data, snkrs_winner 테이블에 데이터를 저장한다.</p>

<p style="color:#4c7a8a;">(Dao단에서는 Affected Row를 통해 제대로 생성이 되었는지를 확인하고 아니라면 에러를 띄우는 코드가 존재한다.)</p>

<blockquote>
  <p>services/snkrsServices.js</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">selectWinner</span> <span class="o">=</span> <span class="n">async</span> <span class="n">style_code</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">check</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">checkUserWinnerBox</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">count</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">getCount</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>
  <span class="kd">const</span> <span class="n">participants</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">getNumOfParticipants</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>

  <span class="k">if</span> <span class="o">(</span><span class="n">check</span><span class="o">.</span><span class="na">result</span> <span class="o">===</span> <span class="n">resultType</span><span class="o">.</span><span class="na">EXIST</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">const</span> <span class="o">[</span><span class="n">winnerInfo</span><span class="o">]</span> <span class="o">=</span> <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">selectWinner</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>

    <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">updateCount</span><span class="o">(</span>
      <span class="n">winnerInfo</span><span class="o">.</span><span class="na">style_code</span><span class="o">,</span>
      <span class="n">count</span><span class="o">[</span><span class="err">'</span><span class="no">MAX</span><span class="o">(</span><span class="n">count</span><span class="o">)</span><span class="err">'</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span>
      <span class="n">participants</span><span class="o">.</span><span class="na">length</span>
    <span class="o">);</span>

    <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">updateWinner</span><span class="o">(</span><span class="n">winnerInfo</span><span class="o">.</span><span class="na">style_code</span><span class="o">,</span> <span class="n">winnerInfo</span><span class="o">.</span><span class="na">user_id</span><span class="o">);</span>
    <span class="n">await</span> <span class="n">snkrsDao</span><span class="o">.</span><span class="na">deleteLottoBox</span><span class="o">(</span><span class="n">style_code</span><span class="o">);</span>

    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>당첨자를 뽑는 코드이다.</p>

<p>checkUserWinnerBox함수를 통해 snkrs_winner에 데이터 유무를 확인하고 만약 아무값도 없다면</p>

<p>아무도 응모하지 않은 것이므로 그냥 return 된다.</p>

<p>한명이상 응모를 했을시 selectWinner함수를 통해 랜덤으로 1명을 뽑는다.</p>

<p>당첨자가 정해지면 updateCount를 통해 해당회차에 응모한 사람만큼만 n+1회차로 업데이트 시켜준다.</p>

<p>마지막으로 당첨자가 뽑혔으니 임시로 응모한 사람들을 저장했던 snkrs_data 테이블은 삭제시켜준다.</p>

<p style="color:#4c7a8a;">(Dao단에서는 Affected Row를 통해 해당 상품에 참가한 인원만큼 데이터를 삭제시켰는지 확인하는 코드가 존재한다.)</p>

<p><br />
<br /></p>

<center><p style="font-weight:bold; color:red">보러가기 ⬇️</p><a href="https://ljhyeokk.github.io/wecode-05/">1차 프로젝트 회고록</a></center>
:ET