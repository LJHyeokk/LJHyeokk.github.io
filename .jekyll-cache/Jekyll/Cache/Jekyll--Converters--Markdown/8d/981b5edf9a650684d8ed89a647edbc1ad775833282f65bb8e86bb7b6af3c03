I"+<h2 id="typescript-기초1-">Typescript 기초1 🔑</h2>

<p>변수를 선언할때는 type을 지정해줘야 한다고 배웠다.</p>

<p>하지만 사실 TS가 자동으로 타입을 지정해주기 때문에 하나하나 전부 타입지정을 해줄 필요가 없다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">kk</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// ERROR</span>
</code></pre></div></div>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="타입을-미리-지정하기-애매할때">타입을 미리 지정하기 애매할때</h3>

<ul>
  <li>Union Type 사용</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">어레이</span><span class="p">:</span> <span class="p">(</span><span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">오브젝트</span><span class="p">:</span> <span class="p">{</span> <span class="nl">data</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">123</span><span class="dl">'</span> <span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>any 사용</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">asd</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span> <span class="c1">// NO ERROR</span>
</code></pre></div></div>

<p>타입이 달라도 에러를 띄우지않는다. 사용하지 않는걸 권장한다.</p>

<ul>
  <li>unKnown 사용</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">asd</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span> <span class="c1">// ERROR</span>
</code></pre></div></div>

<p>unknown은 아무타입이나 상관없이 되지만 이것을 대입하려할때는 에러를 띄운다</p>

<p>(any대신 unknown을 활용하도록 하자)</p>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="void">void</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
  <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>return을 하시는것을 예방 할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">a</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// 파라미터 필수</span>

<span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">?:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">a</span><span class="p">();</span> <span class="c1">// 가능</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">x?: number</code>는 <code class="language-plaintext highlighter-rouge">x: number | undefined</code>와 같다.</p>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="type-narrowing">Type Narrowing</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>if문으로 타입을 하나로 확정지어 준다.</p>

<p>( in, instanceof 으로도 가능 )</p>

<p>(<code class="language-plaintext highlighter-rouge">Array.isArray(x.subject)</code>)</p>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="type-assertion">Type Assertion</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">array</span><span class="p">:</span> <span class="kr">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">x</span> <span class="k">as</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>x를 number로 덮어 씌워준다.</p>

<p>하지만 이걸 남용하면 빠따를 맞는다.</p>

<ol>
  <li>narrowing을 할때 즉 타입을 확정지을때만 사용.</li>
  <li>어떤 타입이 들어올지 확실하게 알고 있을때만 사용.</li>
  <li>비상용으로만.</li>
</ol>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="type-aliases">Type Aliases</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Animal</span> <span class="o">=</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">동물</span><span class="p">:</span> <span class="nx">Animal</span><span class="p">;</span>
</code></pre></div></div>

<p>위와같이 타입을 변수화해서 관리하는것을 타입엘리어스라고 한다.</p>

<p>( 대문자로 관리하는것이 국룰이다. )</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">a</span> <span class="o">=</span> <span class="kr">string</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">|</span> <span class="nx">b</span><span class="p">;</span>
</code></pre></div></div>

<p>이것도 가능</p>

<p><br /></p>
<hr />

<p><br /></p>

<h3 id="readonly">readonly</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Girlfriend</span> <span class="o">=</span> <span class="p">{</span>
  <span class="k">readonly</span> <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">여친</span><span class="p">:</span> <span class="nx">Girlfriend</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">엠버</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">여친</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">유라</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//readonly라서 에러</span>
</code></pre></div></div>

<p>JS에서는 const로 object의 값을 바꾸면 에러가 뜨지 않지만</p>

<p>TS에서는 readonly를 사용하면 에러를 뜨게할 수 있다.</p>
:ET