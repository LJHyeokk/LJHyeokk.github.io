I"!+<h2 id="http-status-code-">HTTP Status Code? 💯</h2>

<center class="notice--info">HTTP Status Code : 클라이언트가 보낸 HTTP 요청에 대한 서버의 응답 코드로, 상태 코드에 따라 요청의 성공/실패 여부를 판단함.</center>

<h2 id="2xx-success">2XX SUCCESS</h2>

<p><br /></p>

<p>200번대의 상태코드는 서버가 클라이언트에게 요청이 성공적으로 처리되었을때 보내는 코드들이다.</p>

<blockquote>
  <p>200번(OK) ▶
클라이언트의 요청을 서버가 정상적으로 처리했다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="no">OK</span>
<span class="o">{</span>
<span class="s">"result"</span> <span class="o">:</span> <span class="kc">false</span>
<span class="s">"status"</span> <span class="o">:</span> <span class="mi">400</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위와 같이 성공했다는 200코드를 보냈지만 실제내용은 실패인 경우로 쓰이는 사례가 있다면 당장 수정하자.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>201번(Created) ▶
클라이언트의 요청을 서버가 정상적으로 처리했고 새로운 리소스가 생겼다.</p>
</blockquote>

<p>201 상태 코드는 POST, PUT 요청에 대한 응답에 주로 사용된다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>202번(Accepted) ▶
클라이언트의 요청은 정상적이나, 서버가 아직 요청을 완료하지 못했다.</p>
</blockquote>

<p>클라이언트의 요청이 정상적이면 서버에선 작업의 성공/실패 응답하는 게 일반적이나, 작업 완료를 위한 일련의 작업들이 오래 걸리기 때문에 나중에 알려주겠다는 의미다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>204번(No Content) ▶
클라이언트의 요청은 정상적이다. 하지만 컨텐츠를 제공하지 않는다.</p>
</blockquote>

<p>자원 삭제 요청을 했고 이 요청이 유효하니 서버는 해당 자원을 삭제했다. 더 이상 응답할 컨텐츠가 없기 때문에 컨텐츠가 없는 204로 응답한다.</p>

<p>(여기서 주의할 점은 200으로 응답하고 응답 body에 null, {}, [], false 등으로 응답하는 것과 다르다는 것이다.
204의 경우 HTTP Response body가 아예 존재하지 않는 경우다.)</p>

<blockquote>
  <p>Example</p>
</blockquote>

<p>PUT</p>

<ul>
  <li>
    <p>자원 수정 요청의 결과가 기존의 자원 내용과 동일하여 변경된 내용이 없을 때 204로 응답할 수 있다.</p>
  </li>
  <li>
    <p>만약 수정 요청으로 자원의 내용이 변경된다면 201로 응답할 것이다.</p>
  </li>
</ul>

<p>DELETE</p>

<ul>
  <li>삭제 요청으로 자원을 삭제하여 더 이상 존재하지 않고 그 자원을 참조하는 모든 자원도 삭제되어 더 이상 HTTP body를 응답하는 것이 무의미해졌을 때 사용한다.</li>
</ul>

<p><br /></p>

<h2 id="4xx-client-errors">4XX Client errors</h2>

<p><br /></p>

<p>4XX의 상태 코드들은 클라이언트의 요청이 유효하지 않아 서버가 해당 요청을 수행하지 않았다는 의미다.</p>

<blockquote>
  <p>400번(Bad Request) ▶
클라이언트의 요청이 유효하지 않아 더 이상 작업을 진행하지 않는 경우</p>
</blockquote>

<p>클라이언트로부터 요청이 들어오면 작업을 바로 진행하지않고 유효성검사부터 하는것이 옳다.</p>

<p>대부분의 API는 사전에 유효성 검증을 통해 400 상태 코드로 클라이언트에게 유효하지 않은 요청임을 응답한다.</p>

<p>그러나, 400 상태 코드로 응답하는 것만으로는 부족하다.</p>

<p>오류 발생 시 파라미터의 위치(path, query, body), 사용자 입력 값, 에러 이유를 꼭 명시하는 것이 좋다.</p>

<blockquote>
  <p>Example</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RequiredKeys</span> <span class="o">{</span>
  <span class="n">constructor</span><span class="o">(</span><span class="no">REQUIRED_KEYS</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span> <span class="o">=</span> <span class="no">REQUIRED_KEYS</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="n">verify</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">let</span> <span class="n">key</span> <span class="n">in</span> <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">REQUIRED_KEYS</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">const</span> <span class="n">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Error</span><span class="o">(</span><span class="err">`$</span><span class="o">{</span><span class="n">key</span><span class="o">}</span> <span class="n">정보가</span> <span class="n">올바르지</span> <span class="n">않습니다</span><span class="o">.</span><span class="err">`</span><span class="o">);</span>
        <span class="n">err</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="mi">400</span><span class="o">;</span>
        <span class="k">throw</span> <span class="n">err</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><br /></p>

<blockquote>
  <p>401번(Unauthorized) ▶
클라이언트가 권한이 없기 때문에 작업을 진행할 수 없는 경우</p>
</blockquote>

<p>상태 코드 이름만 보면 권한(authorized)에 대한 내용처럼 보이지만, 사실 인증(authenticated)에 대한 이야기다.</p>

<p>401은 비인증이다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>403번(Forbidden) ▶
클라이언트가 권한이 없기 때문에 작업을 진행할 수 없는 경우</p>
</blockquote>

<p>403은 권한(authorized)에 대한 내용이다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>404번(Not Found) ▶
클라이언트가 요청한 자원이 존재하지 않다.</p>
</blockquote>

<p>404번에러는 크게 2가지로 나뉜다.</p>

<blockquote>
  <ul>
    <li>경로가 존재하지 않음</li>
  </ul>

  <p>존재하지 않은 경로는 쉽게 404로 응답.(라우터에서 처리)</p>
</blockquote>

<blockquote>
  <ul>
    <li>자원이 존재하지 않음</li>
  </ul>

  <p>/users/:id 에서 id값이 만약 DB에 없는 값이라면 자원이 존재하지 않다는 의미이다.</p>

  <p>따라서 존재하는 경로에 대한 요청이라도 자원이 존재하는지 파악 후, 존재하지 않는다면 404 상태 코드로 응답해야 한다</p>
</blockquote>

<hr />

<p><br /></p>

<blockquote>
  <p>405번(Method Not Allowed) ▶
클라이언트의 요청이 허용되지 않는 메소드인 경우</p>
</blockquote>

<p>자원(URI)은 존재하지만 해당 자원이 지원하지 않는 메소드일 때 응답하는 상태 코드다.</p>

<p>완성도 높은 API를 제공하기 위해서는 사용하는것을 추천한다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>409번(Conflict) ▶
클라이언트의 요청이 서버의 상태와 충돌이 발생한 경우</p>
</blockquote>

<p>400, 401, 403, 404, 405 상태 코드에 속하기 애매한 오류의 상황들을 409로 응답한다.</p>

<blockquote>
  <p>Example</p>

  <ul>
    <li>
      <p>자원(URI) /users/1에 존재하는 메소드고 Not 405</p>
    </li>
    <li>
      <p>/users/:id에서 :id가 유효한 형식이고 Not 400</p>
    </li>
    <li>
      <p>1 사용자도 존재하고 Not 404</p>
    </li>
    <li>
      <p>헤더의 인증(X-TOKEN)도 정확하고 Not 401</p>
    </li>
    <li>
      <p>삭제 권한도 있는 경우 Not 403</p>
    </li>
  </ul>
</blockquote>

<p>대부분의 예외처리를 해주었지만 로직자체가 문제있을 수 있다. 예를들면</p>

<p>사용자의 게시물이 존재하는 경우 사용자를 삭제할 수 없다는 비지니스 로직이 있을 수 있다.</p>

<p>이렇게 API 사용에 있어 비지니스 로직상 모순이 발생하여 처리가 불가능한 경우 응답하는 상태 코드다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="n">isExistItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IsExistItem</span><span class="o">(</span><span class="n">check</span><span class="o">,</span> <span class="n">resultType</span><span class="o">,</span> <span class="mi">409</span><span class="o">);</span>
  <span class="n">isExistItem</span><span class="o">.</span><span class="na">existErr</span><span class="o">(</span><span class="err">'</span><span class="n">이미</span> <span class="n">품목에</span> <span class="n">있습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
</code></pre></div></div>

<p>오류 상황과 마찬가지로 응답 시 오류의 원인을 알려야 한다.</p>

<hr />

<p><br /></p>

<blockquote>
  <p>429번(Too Many Requests) ▶
클라이언트가 일정 시간 동안 너무 많은 요청을 보낸 경우</p>
</blockquote>

<p>해커는 사용자의 비밀번호를 알아내기 위해 POST /login API에 password를 무차별로 대입하면서 요청할 수 있다.</p>

<p>서버 입장에선 자원의 기밀성(Confidentiality)에 피해를 입을 수 있는 공격이면서, 이러한 무차별 요청으로 다른 요청을 처리할 수 없거나 처리가 늦을 수 있는 가용성(Availability)에 피해를 입을 수 있다.</p>

<p>서버는 이러한 공격에 대비해 인증 API의 경우 각 클라이언트는 n 시간 동안 n 회만 요청 가능하다는 룰을 정하고 이것을 초과하면 429 상태 코드를 응답해야 한다.</p>

<p><br /></p>

<h2 id="5xx-server-errors">5XX SERVER ERRORS</h2>

<p><br /></p>

<p>5XX 상태 코드들은 서버 오류로 인해 요청을 수행할 수 없다는 의미다.</p>

<p>출처: https://sanghaklee.tistory.com/61 [이상학의 개발블로그]</p>
:ET