I"y<h2 id="layered-pattern이란-">Layered Pattern이란 🙀</h2>

<center class="notice--danger">백엔드 API를 구현할때 널리 쓰이는 패턴중 레이어드 아키텍처(Layered achitecture) 패턴이 있다. 레이어드 아키텍쳐로 API를 구현할때는 역할에 따라 독립된 모듈로 나누어서 코드를 구현한다.</center>

<center><img src="../images/2021-10-27-first/layered-1.png" alt="layered-1" /></center>

<p><strong>Route, Controller, Service, Model</strong> 각각의 레이어가 하나의 폴더이자 역할을 의미한다.</p>

<ol>
  <li>큰 박스에서 작은 박스로 갈 수록 더 데이터를 다루는 로직(데이터베이스 접근하는 로직)에 근접하게 된다.</li>
  <li>또한, 각각의 레이어는 <strong>오로지</strong> 바로 아래에 있는 레이어에만 의존하게 된다.
    <ul>
      <li>Route → Controller</li>
      <li>Controller → Service</li>
      <li>Service → Model</li>
    </ul>
  </li>
</ol>

<p>예를들어, Route 는 Service 로직을 전혀 모르고 아예 관여 조차 하지 않는다.
따라서, Service 로직을 변경해도 Route 와 Controller 의 코드는 바뀔 필요가 없다.</p>

<p>즉 다음과 같은 상황에서 유연하게 대처할 수 있다는 의미 입니다.
때때로, 서비스를 구현하다가 RDBMS(관계형 데이터 베이스) → NoSQL(ex. mongoDB) 로 이전하는 경우가 있는데, Route와 Controller 의 로직은 전혀 바뀌지 않은채로 데이터를 다루는 Service 와 Model 의 로직만 변경 해 주면 됩니다.</p>

<p>아래의 코드는 지난 시간에 살펴보았던 User API 로직을 위에서 설명한
Route → Controller → Service → Model 레이어로 나누었을 때의 코드 입니다.
위에서 아래로 갈수록 데이터베이스 접근에 근접하게 되며, 핵심 로직을 다룬다고 할 수 있습니다.</p>
:ET